// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  dreams        Dream[]
  dreamstories  DreamStory[]
  likes         Like[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dream {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  analysis    String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  themes      Theme[]
  symbols     Symbol[]
  emotions    Emotion[]
  dreamstory  DreamStory?
}

model Theme {
  id          String       @id @default(cuid())
  name        String
  dreams      Dream[]
  stories     DreamStory[]
}

model Symbol {
  id          String       @id @default(cuid())
  name        String      @unique
  description String?
  dreams      Dream[]
  stories     DreamStory[]
}

model Emotion {
  id          String  @id @default(cuid())
  name        String
  dreams      Dream[]
}

model DreamStory {
  id          String    @id @default(cuid())
  title       String
  dreamId     String    @unique
  userId      String
  content     String    @db.Text
  isPublic    Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dream       Dream     @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  themes      Theme[]
  symbols     Symbol[]
  likes       Like[]
  comments    Comment[]
}

model Like {
  id        String     @id @default(cuid())
  storyId   String
  userId    String
  createdAt DateTime   @default(now())
  story     DreamStory @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId])
}

model Comment {
  id        String     @id @default(cuid())
  content   String
  storyId   String
  userId    String
  createdAt DateTime   @default(now())
  story     DreamStory @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}
