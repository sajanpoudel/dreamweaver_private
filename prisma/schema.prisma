// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  dreams        Dream[]
  accounts      Account[]
  sessions      Session[]
  dreamPatterns DreamPattern[]
  insights      UserInsight[]
  stories       DreamStory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Dream {
  id            String            @id @default(cuid())
  title         String?
  content       String            @db.Text
  analysis      String?           @db.Text
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbols       Symbol[]
  themes        Theme[]
  emotions      Emotion[]
  isPublic      Boolean           @default(false)
  dreamPatterns DreamPattern[]
  connections   DreamConnection[] @relation("SourceDream")
  relatedTo     DreamConnection[] @relation("RelatedDream")
  stories       DreamStory[]
}

model Symbol {
  id          String         @id @default(cuid())
  name        String         @unique
  description String         @db.Text
  dreams      Dream[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  patterns    DreamPattern[]
}

model Theme {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?        @db.Text
  dreams      Dream[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  patterns    DreamPattern[]
}

model Emotion {
  id          String         @id @default(cuid())
  name        String         @unique
  intensity   Float          @default(0)
  description String?        @db.Text
  dreams      Dream[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  patterns    DreamPattern[]
}

model DreamPattern {
  id          String        @id @default(cuid())
  name        String
  description String        @db.Text
  frequency   Int           @default(1)
  confidence  Float         @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  dreams      Dream[]
  symbols     Symbol[]
  themes      Theme[]
  emotions    Emotion[]
  insights    UserInsight[]
}

model DreamConnection {
  id          String   @id @default(cuid())
  dreamId     String
  sourceDream Dream    @relation("SourceDream", fields: [dreamId], references: [id], onDelete: Cascade)
  relatedId   String
  relatedDream Dream   @relation("RelatedDream", fields: [relatedId], references: [id], onDelete: Cascade)
  strength    Float    @default(0)
  type        String   // e.g., "symbol", "theme", "emotion"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserInsight {
  id             String         @id @default(cuid())
  title          String
  description    String         @db.Text
  confidence     Float          @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  patterns       DreamPattern[]
  category       String         // e.g., "psychological", "emotional", "behavioral"
  actionable     Boolean        @default(false)
  recommendation String?        @db.Text
}

model DashboardStats {
  id         String   @id @default("singleton")
  topSymbols Json
  topThemes  Json
  topEmotions Json
  updatedAt  DateTime @updatedAt
}

model DreamStory {
  id        String   @id @default(cuid())
  dreamId   String
  userId    String
  title     String
  content   String   @db.Text
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dream     Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  themes    StoryTheme[]
  symbols   StorySymbol[]

  @@unique([dreamId, userId])
  @@index([userId])
  @@index([dreamId])
  @@map("dream_stories")
}

model StoryTheme {
  id        String    @id @default(cuid())
  name      String
  storyId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  story     DreamStory @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([name, storyId])
  @@index([storyId])
  @@map("story_themes")
}

model StorySymbol {
  id        String    @id @default(cuid())
  name      String
  storyId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  story     DreamStory @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([name, storyId])
  @@index([storyId])
  @@map("story_symbols")
}
