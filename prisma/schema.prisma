// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?
  emailVerified DateTime?
  image         String?
  bio           String?      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  dreams        Dream[]
  dreamstories  DreamStory[]
  likes         Like[]
  comments      Comment[]
  patterns      DreamPattern[]
  status        UserStatus[]
  sleepData     SleepData[]
  correlations  DreamCorrelation[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dream {
  id          String      @id @default(cuid())
  userId      String
  title       String?
  content     String
  isPublic    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  analysis    Json?
  rawAnalysis String?     // Store raw AI response
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbols     Symbol[]
  themes      Theme[]
  emotions    Emotion[]
  checkpoints DreamCheckpoint[]
  patterns    DreamPattern[]
  mentalState MentalStateSnapshot[]
  stories     DreamStory[]
  metrics     DreamMetrics?

  @@index([userId])
}

model DreamCheckpoint {
  id          String   @id @default(cuid())
  dreamId     String
  timestamp   DateTime @default(now())
  type        String   // e.g., "initial", "followup", "reflection"
  content     Json     // Store structured checkpoint data
  similarity  Float?   // Similarity score with other dreams
  
  // Relations
  dream       Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  
  @@index([dreamId])
}

model DreamPattern {
  id          String   @id @default(cuid())
  userId      String
  type        String   // e.g., "recurring", "evolving", "cyclical"
  elements    Json     // Store pattern elements
  confidence  Float
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @updatedAt
  frequency   Int      @default(1)
  impact      Float?   // Impact score on user's mental state
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dreams      Dream[]
  
  @@index([userId])
}

model MentalStateSnapshot {
  id            String   @id @default(cuid())
  dreamId       String
  timestamp     DateTime @default(now())
  stressLevel   Float
  anxietyLevel  Float
  moodScore     Float
  sleepQuality  Float?
  energyLevel   Float?
  clarity       Float?
  triggers      Json?    // Store identified stress/anxiety triggers
  improvements  Json?    // Store areas of improvement
  
  // Relations
  dream         Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  
  @@index([dreamId])
}

model Theme {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String   @default("psychological")
  description String?
  frequency   Int      @default(1)
  dreams      Dream[]
  stories     DreamStory[] @relation("DreamStoryThemes")
}

model Symbol {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String   @default("cultural") // personal, cultural, archetypal
  description String?
  frequency   Int      @default(1)
  dreams      Dream[]
  stories     DreamStory[] @relation("DreamStorySymbols")
}

model Emotion {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String   @default("primary")
  valence     Float    @default(0)    // -1 to 1
  arousal     Float    @default(0)    // 0 to 1
  frequency   Int      @default(1)
  dreams      Dream[]
}

model DreamStory {
  id          String    @id @default(cuid())
  dreamId     String    @unique
  userId      String
  title       String
  content     Json
  isPublic    Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dream       Dream     @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  themes      Theme[]   @relation("DreamStoryThemes")
  symbols     Symbol[]  @relation("DreamStorySymbols")
  likes       Like[]
  comments    Comment[]

  @@index([userId])
}

model Like {
  id        String     @id @default(cuid())
  storyId   String
  userId    String
  createdAt DateTime   @default(now())
  story     DreamStory @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId])
}

model Comment {
  id        String     @id @default(cuid())
  content   String
  storyId   String
  userId    String
  createdAt DateTime   @default(now())
  story     DreamStory @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStatus {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp   DateTime @default(now())
  stressLevel Int      @default(0)
  moodScore   Int      @default(0)
  anxiety     Int      @default(0)
  physicalHealth Int   @default(0)
  lifeEvents  Json?
  dailyActivities String[]
  notes       String?

  @@index([userId, timestamp])
}

model SleepData {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  duration    Float    // Hours
  quality     Int      @default(0)
  deepSleep   Float?   // Hours
  remSleep    Float?   // Hours
  interruptions Int    @default(0)
  notes       String?

  @@index([userId, date])
}

model DreamMetrics {
  id          String   @id @default(cuid())
  dreamId     String   @unique
  dream       Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  clarity     Int      @default(0)
  vividness   Int      @default(0)
  lucidity    Int      @default(0)
  recall      Int      @default(0)
  impact      Int      @default(0)
  
  @@index([dreamId])
}

model DreamCorrelation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  factor      String   // e.g. "sleepQuality", "stressLevel", etc.
  correlation Float    // -1 to 1
  sampleSize  Int
  confidence  Float    // 0 to 1
  timeRange   String   // e.g. "last_week", "last_month", "last_year"
  lastUpdated DateTime @default(now())

  @@unique([userId, factor])
  @@index([userId, factor])
}
